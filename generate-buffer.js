const SharedMemLayout = require("./sharedmem.json");
const fs = require("fs");
const { v4: uuidv4 } = require("uuid");

// Generate both C++ and JS versions
// also generate a uuid so that we can match between the versions

const generatedUuid = uuidv4();

// Take the last 2 characters of the UUID to generate the
// firmware ident
const lastByteString = generatedUuid.slice(-2);
const firmwareIdent = parseInt(lastByteString, 16);

const fileHeading =
"// AUTOGENERATED FILE. DO NOT MODIFY.\n" +
"// Generated via `npm run gen-shmem`\n\n" +
"// Instance: " + generatedUuid + "\n\n";

let cppOutput = fileHeading +
"#pragma once\n" +
"#include <stdint.h>\n\n" +
"#define FIRMWARE_IDENT " + firmwareIdent + "\n\n" +
"struct Data {\n";

SharedMemLayout.forEach(field => {
    let line = `  ${field.type} ${field.name}`;

    if (field.arraySize !== undefined) {
        line += `[${field.arraySize}]`;
    }

    line += ";\n"
    cppOutput += line;
});

cppOutput += "};\n";

function dataSizeForType(type) {
    switch (type) {
        case "bool":
        case "uint8_t":
        case "int8_t":
            return 1;
        case "uint16_t":
        case "int16_t":
            return 2;
        default:
            return 1;
    }
}


let tsOutput = fileHeading +
"export const FIRMWARE_IDENT: number = " + firmwareIdent + ";\n\n" +
"export enum ShmemDataType {\n" +
"    BOOL,\n" +
"    UINT8_T,\n" +
"    INT8_T,\n" +
"    UINT16_T,\n" +
"    INT16_T,\n" +
"}\n\n" +
"export interface ShmemElementDefinition {\n" +
"    offset: number;\n" +
"    type: ShmemDataType;\n" +
"    arraySize?: number;\n" +
"}\n\n" +
"const shmemBuffer: {[key: string]: ShmemElementDefinition} = {\n";

function getBufDataTypeFromType(type) {
    if (type === "bool") {
        return "ShmemDataType.BOOL";
    }
    if (type === "uint8_t") {
        return "ShmemDataType.UINT8_T";
    }
    if (type === "int8_t") {
        return "ShmemDataType.INT8_T";
    }
    if (type === "uint16_t") {
        return "ShmemDataType.UINT16_T";
    }
    if (type === "int16_t") {
        return "ShmemDataType.INT16_T";
    }
}

let currOffset = 0;
SharedMemLayout.forEach(field => {
    let line = `    ${field.name}: { offset: ${currOffset}, type: ${getBufDataTypeFromType(field.type)}`;

    let dataSize = dataSizeForType(field.type);
    if (field.arraySize !== undefined) {
        dataSize *= field.arraySize;
        line += `, arraySize: ${field.arraySize}`
    }

    line += "},\n";
    tsOutput += line;
    currOffset += dataSize;
})

tsOutput += "};\n\n";
tsOutput += "export default Object.freeze(shmemBuffer);\n"

// Write the files
fs.writeFileSync("./firmware/include/shmem_buffer.h", cppOutput);
fs.writeFileSync("./src/romi-shmem-buffer.ts", tsOutput);
